# 更新变更日志

更新项目的 CHANGELOG.md 文件，添加新的变更记录。

## 使用方法：
`/更新变更日志 <版本号> <变更类型> <变更描述>`

## 参数说明：
- `<版本号>`: 版本编号 (例如: "1.1.0")
- `<变更类型>`: 以下类型之一：
  - `added` (新增) - 新功能
  - `changed` (变更) - 现有功能的更改
  - `deprecated` (废弃) - 即将移除的功能
  - `removed` (移除) - 已删除的功能
  - `fixed` (修复) - Bug 修复
  - `security` (安全) - 安全性修复
- `<变更描述>`: 变更的详细描述

## 使用示例：
- `/更新变更日志 1.1.0 added "新增 Markdown 到 BlockDoc 转换功能"`
- `/更新变更日志 1.0.2 fixed "修复 HTML 渲染器输出错误的问题"`
- `/更新变更日志 1.2.0 changed "优化计算器性能和响应速度"`

## 执行流程：
1. 检查 CHANGELOG.md 文件是否存在，不存在则创建
2. 查找或创建指定版本的章节
3. 在相应的变更类型下添加新条目
4. 按照 Keep a Changelog 规范格式化
5. 将更新后的变更日志写回文件
6. 可选择性地提交更改并生成适当的提交消息

## 格式标准：
遵循 [Keep a Changelog](https://keepachangelog.com) 格式：

### 标准结构：
```markdown
# 变更日志

## [版本号] - YYYY-MM-DD

### Added (新增)
- 新功能描述

### Changed (变更)
- 现有功能更改描述

### Deprecated (废弃)
- 即将移除的功能描述

### Removed (移除)
- 已删除功能描述

### Fixed (修复)
- Bug 修复描述

### Security (安全)
- 安全性修复描述
```

## 最佳实践：
- **按类型分组**: 将变更按照上述 6 种类型分类
- **条目格式**: 使用项目符号列表
- **版本日期**: 为版本章节添加发布日期
- **简洁描述**: 保持条目简洁但具有描述性
- **用户视角**: 从用户角度描述变更影响

## 中文项目适配：
- 支持中文版本号描述
- 兼容中文日期格式
- 提供中文变更类型说明
- 自动生成中文提交消息

## 与 Git 工作流集成：
- 自动生成符合项目规范的提交消息
- 可结合 `/commit` 命令一起使用
- 支持 issue 编号关联
- 遵循项目的 emoji 提交规范

## 使用场景：
- 🚀 **版本发布**: 记录新版本的所有变更
- 📝 **功能追踪**: 跟踪功能的演进历史
- 🐛 **问题记录**: 记录已修复的问题
- 📊 **项目透明**: 让用户了解项目发展